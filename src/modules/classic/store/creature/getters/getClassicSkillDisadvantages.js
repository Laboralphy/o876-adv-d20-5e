const CONSTS = require("../../../../../consts");
const { computeRuleValue } = require('../../../../../store/creature/common/compute-rule-value')
const {getDisAndAdvEffectRegistry, getThoseProvidedByEffects} = require("../../../../../store/creature/common/get-disandadv-effect-registry");

/**
 * Etabli la liste des avantages de THIS par rapport à sa cible THIS.target
 * @param state
 * @param getters {D20CreatureStoreGetters}
 * @return {D20AdvantagesOrDisadvantages}
 */
module.exports = (state, getters) => {
    // const myConditions = getters.getConditionSet
    // const myConditionSources = getters.getConditionSources
    const targetConditions = getters.getTargetConditionSet
    const targetConditionSources = getters.getTargetConditionSources
    // const aggressorConditions = getters.getAggressorConditionSet
    // const aggressorConditionSources = getters.getAggressorConditionSources
    const myID = getters.getId
    const oRelevantEffects = getters
        .getEffects
        .filter(effect => effect.type === CONSTS.EFFECT_DISADVANTAGE)
    const oRelevantProperties = getters
        .getEquipmentItemProperties
        .filter(prop => prop.property === CONSTS.ITEM_PROPERTY_DISADVANTAGE)
    const oAdvantageEffectRegistry = getDisAndAdvEffectRegistry(oRelevantEffects, oRelevantProperties)

    /**
     * Returns true if the condition is generated by this
     * @param sCondition
     * @returns {*}
     */
    const targetAffectedByMe = sCondition => targetConditions.has(sCondition) &&
        targetConditionSources[sCondition].has(myID)

    // La créature porte une armure qui n'est pas adaptée au déplacement furtif
    const WEARING_NON_STEALTH_ARMOR = getters.isWearingStealthDisadvantagedArmor

    /*
    Commencer par définir les règles.
    Ces règles permettront au système d'afficher pour quelles raisons on bénéficie ou pas d'un avantage
     */

    /*
    Définir l'ossature D20AdvantagesOrDisadvantages
     */
    return {
        'skill-acrobatics': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-acrobatics')
        }),
        'skill-animal-handling': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-animal-handling')
        }),
        'skill-arcana': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-arcana')
        }),
        'skill-athletics': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-athletics')
        }),
        'skill-deception': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-deception')
        }),
        'skill-history': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-history')
        }),
        'skill-insight': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-insight')
        }),
        'skill-intimidation': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-intimidation')
        }),
        'skill-investigation': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-investigation')
        }),
        'skill-medicine': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-medicine')
        }),
        'skill-nature': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-nature')
        }),
        'skill-performance': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-performance')
        }),
        'skill-persuasion': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-persuasion')
        }),
        'skill-religion': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-religion')
        }),
        'skill-sleight-of-hand': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-sleight-of-hand')
        }),
        'skill-stealth': computeRuleValue({
            WEARING_NON_STEALTH_ARMOR,
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-stealth')
        }),
        'skill-survival': computeRuleValue({
            ...getThoseProvidedByEffects(oAdvantageEffectRegistry, CONSTS.ROLL_TYPE_CHECK, 'skill-survival')
        })
    }
}
