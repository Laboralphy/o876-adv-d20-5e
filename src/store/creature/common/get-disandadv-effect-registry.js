/**
 * @param effects {D20Effect|[]}
 * @param properties {D20ItemProperty[]}
 * @returns {Object<string, Object<string, string>>}
 */
function getDisAndAdvEffectRegistry (effects, properties) {
    const oDisAndAdvEffectRegistry = {}

    effects
        .forEach(effect => {
            const effectData = effect.data
            effectData.rollTypes.forEach(rt => {
                effectData.abilities.forEach(ab => {
                    if (!(rt in oDisAndAdvEffectRegistry)) {
                        oDisAndAdvEffectRegistry[rt] = {}
                    }
                    const oAdvEffRegRoll = oDisAndAdvEffectRegistry[rt]
                    if (!(ab in oAdvEffRegRoll)) {
                        oAdvEffRegRoll[ab] = []
                    }
                    oAdvEffRegRoll[ab].push(effectData.origin)
                })
            })
        })
    properties
        .forEach(prop => {
            prop.data.rollTypes.forEach(rt => {
                prop.data.abilities.forEach(ab => {
                    if (!(rt in oDisAndAdvEffectRegistry)) {
                        oDisAndAdvEffectRegistry[rt] = {}
                    }
                    const oAdvEffRegRoll = oDisAndAdvEffectRegistry[rt]
                    if (!(ab in oAdvEffRegRoll)) {
                        oAdvEffRegRoll[ab] = []
                    }
                    oAdvEffRegRoll[ab].push(prop.data.origin)
                })
            })
        })
    return oDisAndAdvEffectRegistry
}

/**
 *
 * @param oRegistry
 * @param sRollType
 * @param sAbility
 * @returns {Object<string, boolean>}
 */
function getThoseProvidedByEffects (oRegistry, sRollType, sAbility) {
    const oResult = {}
    if ((sRollType in oRegistry) && (sAbility in oRegistry[sRollType])) {
        oRegistry[sRollType][sAbility].forEach(lab => {
            oResult[lab] = true
        })
    }
    return oResult
}

/**
 * Returns true if the condition is generated by this
 * @param sCondition
 * @param getters {D20CreatureStoreGetters}
 * @returns {*}
 */
function targetAffectedByMe (sCondition, getters) {
    const targetConditions = getters.getTargetConditionSet
    const targetConditionSources = getters.getTargetConditionSources
    const myID = getters.getId

    return targetConditions.has(sCondition) &&
        targetConditionSources[sCondition].has(myID)
}

module.exports = {
    getDisAndAdvEffectRegistry,
    getThoseProvidedByEffects,
    targetAffectedByMe
}
